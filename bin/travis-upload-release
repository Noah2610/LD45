#!/bin/bash
# Script, which is run after a travis build.
# Uploads the built release to Google Drive
# using `gdrive` (https://github.com/gdrive-org/gdrive).

# shellcheck source=./travis-share.sh
_dir="$( dirname "$0" )"
source "${_dir}/travis-share.sh"
unset _dir

function upload_release {
    check "gdrive"
    [ -n "$GDRIVE_REFRESH_TOKEN" ] || \
        err "$( colored "$COLOR_CODE" "\$GDRIVE_REFRESH_TOKEN" ) must be set"
    [ -n "$GDRIVE_DIR_ID" ] || \
        err "$( colored "$COLOR_CODE" "\$GDRIVE_DIR_ID" ) must be set"

    local release_path
    release_path="$( get_release_path )"
    check_file "$release_path"

    local out
    local gdrive_file_id
    msg "Uploading release to Google Drive using \`$( colored "$COLOR_CODE" "gdrive" )\`"
    if out="$( 2>&1 gdrive upload               \
        --refresh-token "$GDRIVE_REFRESH_TOKEN" \
        "$release_path"                         \
        --parent "$GDRIVE_DIR_ID" )"
    then
        check "tail"
        check "cut"
        msg "gdrive output:\n$out"
        gdrive_file_id="$( echo "$out" | sed 's/\n\n/\n/g' | tail -n1 | cut -d" " -f2 )"
        notify_telegram_success "$gdrive_file_id"
    else
        notify_telegram_failure "$out"
    fi
}

function notify_telegram_success {
    local gdrive_file_id="$1"

    local message=
    message="$(
cat <<MSGEND
__Successfully built release  
\`${TRAVIS_TAG}-${TRAVIS_OS_NAME}\`!__
MSGEND
)"

    if [ -n "$gdrive_file_id" ]; then
        local gdrive_file_url="https://drive.google.com/file/d/${gdrive_file_id}/view"
        message="${message}  
[Google Drive Download](${gdrive_file_url})"
    fi

    send_telegram_message "$message"
    msg "$message"
}

function notify_telegram_failure {
    local out="$1"
    local message=
    message="$(
cat <<MSGEND
__Oh-oh!__ Something went wrong while uploading release  
\`${TRAVIS_TAG}-${TRAVIS_OS_NAME}\`!  
Check the [Job Log](${TRAVIS_JOB_WEB_URL})  
\`\`\`
$out
\`\`\`
MSGEND
)"
    send_telegram_message "$message"
    err "$message"
}

upload_release
